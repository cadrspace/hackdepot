#! /bin/sh
### BEGIN INIT INFO
# Provides:          hackdepot
# Required-Start:    $network $syslog
# Required-Stop:     $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: HackDepot init script.
# Description:       HackDepot is an inventory tool for community-driven
#                    places such as hackerspaces.
### END INIT INFO

# Author: Artyom V. Poptsov <poptsov.artyom@gmail.com>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="HackDepot daemon"
NAME="hackdepot"

PIDFILE_DIR=/var/run/$NAME
PIDFILE=$PIDFILE_DIR/$NAME.pid

DAEMON_ARGS="--pid=$PIDFILE"
SCRIPTNAME=/etc/init.d/$NAME

# Change the path to the actual path to HackDepot sources.
HACKDEPOT_DIR=/srv/hackdepot
DAEMON=${HACKDEPOT_DIR}/$NAME

# A user on behalf of which the daemon should be run.
DAEMON_USER=hackdepot

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# Start the daemon.
do_start()
{
    export SECRET_KEY_BASE
    [ ! -e $PIDFILE_DIR ] && mkdir $PIDFILE_DIR && chown $DAEMON_USER $PIDFILE_DIR
    start-stop-daemon --start --quiet --pidfile $PIDFILE --chdir $HACKDEPOT_DIR \
                      --chuid $DAEMON_USER --exec $DAEMON --test > /dev/null \
	|| return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --chdir $HACKDEPOT_DIR \
                      --user $DAEMON_USER --chuid $DAEMON_USER --exec $DAEMON \
                      --background -- $DAEMON_ARGS \
	|| return 2
}

# Stop the daemon.
do_stop()
{
    start-stop-daemon --stop --retry=TERM/30/KILL/5 --pidfile $PIDFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2

    rm -f $PIDFILE
    return "$RETVAL"
}

case "$1" in
    start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
	    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
    stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
	    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
    status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
    restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	    0|1)
		do_start
		case "$?" in
		    0) log_end_msg 0 ;;
		    1) log_end_msg 1 ;; # Old process is still running
		    *) log_end_msg 1 ;; # Failed to start
		esac
		;;
	    *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
    *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
